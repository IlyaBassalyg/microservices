services:
  eureka-service-discovery:
    build:
      context: .
      dockerfile: eureka-service-discovery/Dockerfile
    container_name: eureka-service-discovery
    ports:
      - "8761:8761"
  resource-db:
    image: postgres:17-alpine3.22
    container_name: resource-db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_RESOURCE_DB}
    volumes:
      - ./init_scripts/resource-db:/docker-entrypoint-initdb.d
    tmpfs:
      - /var/lib/postgresql/data
    ports:
      - "5432:5432"
  song-db:
    image: postgres:17-alpine3.22
    container_name: song-db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_SONG_DB}
    volumes:
      - ./init_scripts/song-db:/docker-entrypoint-initdb.d
    tmpfs:
      - /var/lib/postgresql/data
    ports:
      - "5433:5432"
  resource-service:
    build:
      context: .
      dockerfile: resource-service/Dockerfile
    container_name: resource-service
    environment:
      RESOURCE_DB_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SONG_SERVICE_APP_URL: ${SONG_SERVICE_URL}
      EUREKA_SERVICE_APP_URL: ${EUREKA_SERVICE_URL}

    depends_on:
      eureka-service-discovery:
        condition: service_started
      resource-db:
        condition: service_started
    restart: always
    ports:
      - "8080:8080"
  song-service:
    build:
      context: .
      dockerfile: song-service/Dockerfile
    environment:
      SONG_DB_DATASOURCE_URL: ${SONG_DB_URL}
      EUREKA_SERVICE_APP_URL: ${EUREKA_SERVICE_URL}
    depends_on:
      eureka-service-discovery:
        condition: service_started
      song-db:
        condition: service_started
    restart: always
    deploy:
      replicas: 2
    ports:
      - 8081-8082:8081